# üõ°Ô∏è AIxBlock Security Fixes - Nginx Configuration
# Fixes for 5 new vulnerabilities discovered

server {
    listen 443 ssl;
    server_name workflow.aixblock.io app.aixblock.io api.aixblock.io aixblock.io;
    
    # SECURITY FIX 1: Hide server version (Server Version Disclosure)
    server_tokens off;
    
    # SECURITY FIX 2: Comprehensive security headers (Missing Security Headers)
    add_header X-Content-Type-Options nosniff;
    add_header X-Frame-Options DENY;
    add_header X-XSS-Protection "1; mode=block";
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload";
    add_header Referrer-Policy "strict-origin-when-cross-origin";
    add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self' data:; connect-src 'self' https:; frame-ancestors 'none';";
    add_header Permissions-Policy "geolocation=(), microphone=(), camera=(), payment=(), usb=(), magnetometer=(), gyroscope=(), speaker=(), vibrate=(), fullscreen=(), sync-xhr=()";
    add_header X-Download-Options noopen;
    add_header X-Permitted-Cross-Domain-Policies none;
    add_header Cross-Origin-Embedder-Policy require-corp;
    add_header Cross-Origin-Opener-Policy same-origin;
    add_header Cross-Origin-Resource-Policy same-origin;
    
    # SECURITY FIX 3: Fix CORS misconfiguration (CORS Main Domain)
    # Remove wildcard CORS and implement specific origins
    location / {
        # CORS configuration for specific origins only
        if ($http_origin ~* ^https://(app|workflow|workflow-live)\.aixblock\.io$) {
            add_header Access-Control-Allow-Origin $http_origin;
            add_header Access-Control-Allow-Credentials "true";
            add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS";
            add_header Access-Control-Allow-Headers "Origin, Content-Type, Accept, Authorization, X-Requested-With";
            add_header Access-Control-Expose-Headers "Content-Type, Authorization";
        }
        
        # Handle preflight requests
        if ($request_method = 'OPTIONS') {
            add_header Access-Control-Allow-Origin $http_origin;
            add_header Access-Control-Allow-Credentials "true";
            add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS";
            add_header Access-Control-Allow-Headers "Origin, Content-Type, Accept, Authorization, X-Requested-With";
            add_header Access-Control-Max-Age 86400;
            add_header Content-Length 0;
            add_header Content-Type text/plain;
            return 204;
        }
    }
    
    # SECURITY FIX 4: IP header validation (IP Header Injection)
    location / {
        # Validate and sanitize IP headers
        if ($http_x_forwarded_for ~* "\r|\n") {
            return 400;
        }
        if ($http_x_real_ip ~* "\r|\n") {
            return 400;
        }
        if ($http_x_client_ip ~* "\r|\n") {
            return 400;
        }
        if ($http_x_originating_ip ~* "\r|\n") {
            return 400;
        }
        
        # Remove suspicious IP headers
        proxy_set_header X-Forwarded-For "";
        proxy_set_header X-Real-IP "";
        proxy_set_header X-Client-IP "";
        proxy_set_header X-Originating-IP "";
        
        # Use only trusted proxy IPs
        real_ip_header X-Forwarded-For;
        set_real_ip_from 10.0.0.0/8;
        set_real_ip_from 172.16.0.0/12;
        set_real_ip_from 192.168.0.0/16;
    }
    
    # SECURITY FIX 5: HTTP header injection prevention (HTTP Header Injection)
    location / {
        # Sanitize User-Agent header
        if ($http_user_agent ~* "\r|\n") {
            return 400;
        }
        
        # Limit User-Agent length
        if ($http_user_agent ~* "^.{1000,}") {
            return 400;
        }
        
        # Sanitize other headers
        if ($http_accept ~* "\r|\n") {
            return 400;
        }
        if ($http_accept_language ~* "\r|\n") {
            return 400;
        }
        if ($http_accept_encoding ~* "\r|\n") {
            return 400;
        }
    }
    
    # Additional security measures
    location / {
        # Rate limiting
        limit_req zone=api burst=20 nodelay;
        
        # Request size limits
        client_max_body_size 10M;
        
        # Timeout settings
        proxy_connect_timeout 30s;
        proxy_send_timeout 30s;
        proxy_read_timeout 30s;
        
        # Security headers for all responses
        add_header X-Content-Type-Options nosniff;
        add_header X-Frame-Options DENY;
        add_header X-XSS-Protection "1; mode=block";
    }
}

# Rate limiting configuration
http {
    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
    
    # Additional security headers for all responses
    add_header X-Content-Type-Options nosniff;
    add_header X-Frame-Options DENY;
    add_header X-XSS-Protection "1; mode=block";
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload";
    add_header Referrer-Policy "strict-origin-when-cross-origin";
}
